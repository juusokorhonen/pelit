#!/usr/bin/env python3
# -*- coding: utf8 -*-
import sys   # sys.exit -komennon tuonti
import argparse   # Komentoriviargumenttien parsimiseen
import random   # Korttipakan sekoittamista varten


# Ensimm√§iseksi kirjoitamme tarvittavat funktiot

def aloita_peli():
	"""Pelin peruslogiikka on koodattu t√§nne.
	"""

	tulosta_aloitusviesti()

	vaikeustaso = aloita_uusi_peli()
	while (vaikeustaso != 0):

		arvaukset = uusi_lista()
		pakka = uusi_pakka(vaikeustaso)
		while not pakka_j√§rjestyksess√§(pakka):

			#tulosta_tyhj√§_pakka(pakka[:], n√§yt√§_numerot=True)

			arvaus = pyyd√§_uusi_arvaus(len(pakka))   # Annetaan pakan koko funktiolle

			arvaukset = lis√§√§_arvaus_listalle(arvaukset, pakka[:], arvaus)
			pakka = muuta_pakkaa(pakka, arvaus)

		# T√§nne p√§√§st√§√§n, kun pakka on j√§rjestyksess√§
		arvaukset = lis√§√§_arvaus_listalle(arvaukset, pakka[:], None)
		tulosta_tulokset(arvaukset)

		# Pyyd√§ uutta peli√§
		vaikeustaso = aloita_uusi_peli()

	tulosta_lopetusviesti()


def tulosta_aloitusviesti():
	"""Tulostaa aloitusviestin.
	"""

	print("#######################################")
	print(" * * * K√Ñ√ÑNN√Ñ KORTIT OIKEIN P√ÑIN * * * ")
	print("#######################################")
	print()
	print("Teht√§v√§n√§si on saada kaikki kortit oikein p√§in.")
	print("Et tied√§ mitk√§ kortit ovat oikein ja mitk√§ v√§√§rin")
	print("p√§in. Voit k√§√§nt√§√§ yhden kortin kerrallaan.")
	print("Tietokone kertoo sinulle, kun kaikki kortit ovat")
	print("oikein p√§in.")
	print()
	print("Alussa v√§hint√§√§n yksi kortti on v√§√§rin p√§in.")
	print()


def aloita_uusi_peli():
	"""T√§m√§ funktio kysyy pelaajalta aloitetaanko uusi
	peli ja palauttaa, pelin vaikeustason.

	Palauttaa
	---------
	0 : jos uutta pelia ei aloiteta
	1,2,3 : uuden pelin vaikeustason mukaan
	"""

	print("Aloitetaanko uusi peli?")
	print("Voit valita HELPON pelin (3 korttia), TAVALLISEN")
	print("pelin (4 korttia) tai VAIKEAN pelin (6 korttia).")
	print()
	print("Jos haluat lopettaa, kirjoita LOPETA.")
	print("Mik√§ on valintasi (HELPPO, TAVALLINEN, vai VAIKEA)?")
	
	# Vaihtoehdoille annetaan numeroarvot
	valinnat = {'lopeta': 0, 'helppo': 1, 'tavallinen': 2, 'vaikea': 3}
	
	# Seuraavaksi pyydet√§√§n vastausta, muutetaan kirjaimet pieniksi ja poistetaan ylim√§√§r√§iset v√§lily√∂nnit
	valinta = input('? ').lower().strip()   
	while valinta not in valinnat:
		print("Valintaa ei tunnistettu.")
		print("Valitse joko HELPPO, TAVALLINEN, VAIKEA, tai LOPETA.")
		valinta = input('? ').lower().strip()

	if valinnat[valinta] != 0:
		print("Onnea matkaan!")

	return valinnat[valinta]


def uusi_lista():
	"""T√§m√§ funktio palauttaa uuden listan, johon arvaukset
	tallennetaan.
	"""
	return []


def uusi_pakka(vaikeustaso):
	"""T√§m√§ funktio palauttaa uuden pakan, joka on valmiina 
	aloitusj√§rjestyksess√§.

	Parametrit
	----------
	vaikeustaso : int
		Pelin vaikeustaso, joka muuttaa korttien lukum√§√§r√§n.
		1 = 3 korttia
		2 = 4 korttia
		3 = 6 korttia

	Palauttaa
	---------
	array : Bool
		True tarkoittaa, ett√§ kortti on oikein p√§in
		False tarkoittaa, ett√§ kortti on v√§√§rin p√§in
		Esimerkkipakka: [False, True, False, False]
	"""
	korttien_lukum√§√§r√§t = [3, 4, 6]   # M√§√§ritt√§√§ vaikeustason
	korttien_lukum√§√§r√§ = korttien_lukum√§√§r√§t[vaikeustaso-1]   # V√§hennet√§√§n yksi, koska listan numerointi alkaa nollasta ja vaikeustaso ykk√∂sest√∂

	# Palauttaa luvun joka on maksimissaan yksi v√§hemm√§n kuin korttien lukum√§√§r√§, eli v√§hint√§√§n yksi kortti on k√§√§nnetty
	oikeinp√§in_olevian_korttien_lukum√§√§r√§ = random.randrange(korttien_lukum√§√§r√§)

	# Seuraaaksi muodostetaan lista, jossa on oikea m√§√§r√§ True-kentti√§ (kortit oikeinp√§in) ja False-kentti√§ (kortit v√§√§rinp√§in)
	pakka = [True]*oikeinp√§in_olevian_korttien_lukum√§√§r√§ + [False]*(korttien_lukum√§√§r√§-oikeinp√§in_olevian_korttien_lukum√§√§r√§)

	# Sitten sekoitetaan kortit
	random.shuffle(pakka)

	# Palautetaan korttipakka
	return pakka


def pakka_j√§rjestyksess√§(pakka):
	"""Kertoo onko pakka j√§rjestyksess√§.

	Parametrit
	----------
	pakka : arr_like
		Pakka, joka on lista True/False -arvoja.

	Palauttaa
	---------
	Bool
		True, jos pakka on j√§rjestykess√§
		False, jos pakka ei ole j√§rjestyksess√§
	"""
	# Seuraava rivi vertaa True-kenttien lukum√§√§r√§√§ (sum(pakka)) kaikkien korttien lukum√§√§r√§√§n (len(pakka))
	# ja palauttaa True, jos n√§m√§ ovat samat.
	return sum(pakka) == len(pakka) 


def pyyd√§_uusi_arvaus(korttien_lukum√§√§r√§):
	"""Pyyt√§√§ uuden arvauksen ja palauttaa k√§√§nnett√§v√§n kortin numeron.

	Parametrit
	----------
	korttien_lukum√§√§r√§ : int
		Korttien lukum√§√§r√§ pakassa. 

	Palauttaa
	---------
	int
		K√§√§nnett√§v√§n kortin numero.
		1 = vasemmanpuoleisin
	"""
	print("Mik√§ kortti k√§√§nnet√§√§n? Anna numero j√§rjestyksess√§ vasemmalta")
	print("l√§htien. 1 = vasemmanpuoleisin kortti, 2 = siit√§ seuraavan jne.")
	print()
	print("Anna kortin numero v√§lilt√§ {}...{}".format(1, korttien_lukum√§√§r√§))
	
	try:
		kortin_numero = int(input("? "))
	except ValueError as e:
		kortin_numero = -1   # Jos numero ei kelpaa, asetetaan numero v√§liaikeisesti -1:ksi

	# Pyyd√§ uutta numeroa kunnes se kelpaa
	while (kortin_numero <= 0 or kortin_numero > korttien_lukum√§√§r√§):
		print("Anna kortin numero v√§lilt√§ {}...{}".format(1, korttien_lukum√§√§r√§))

		try:
			kortin_numero = int(input("? "))
		except ValueError as e:
			kortin_numero = -1   # Jos numero ei kelpaa, asetetaan numero v√§liaikeisesti -1:ksi

	return kortin_numero


def tulosta_tyhj√§_pakka(pakka, n√§yt√§_numerot=False):
	"""Tulostaa pakan, muttei n√§yt√§ sen sis√§lt√∂√§.

	Parametrit
	----------
	pakka : arr_like
		Tulostettava pakka

	n√§yt√§_numerot : bool
		True, niin tulostetaan my√∂s korttien numerot
	"""
	# K√§ytet√§√§n tulosta_pakka -funktiota tulostamaan pakka
	tulosta_pakka(pakka, n√§yt√§_numerot=n√§yt√§_numerot, oikein="?", v√§√§rin="?")


def tulosta_pakka(pakka, arvaus=None, rivinro=None, n√§yt√§_numerot=False, oikein="üÇ±", v√§√§rin="üÇ†"):
	"""Tulostaa pakan ja n√§ytt√§√§ sen sis√§ll√∂n.
	Parametrit
	----------
	pakka : arr_like
		Tulostettava pakka

	n√§yt√§_numerot : bool
	"""
	korttien_lukum√§√§r√§ = len(pakka)

	if n√§yt√§_numerot:
		print("   " + " ".join([str(x+1) for x in range(korttien_lukum√§√§r√§)]))
		print("   -" + "--"*(korttien_lukum√§√§r√§-1))

	print(("{:2d} ".format(rivinro) if rivinro else "   ") + (" ".join([oikein if x else v√§√§rin for x in pakka])) + (" [{}]".format(arvaus) if arvaus is not None else ""))	


def lis√§√§_arvaus_listalle(arvaukset, pakka, arvaus):
	"""Lis√§√§ arvauksen ja pakan tilan arvauksiin.

	Parametrit
	----------
	arvaukset : arr_like
		Lista arvauksista

	pakka : arr_like
		Pakan tilan ennen arvausta

	arvaus : int
		Arvatun kortin numero

	Palauttaa
	---------
	arr_like
		Uusi lista arvauksista
	"""
	arvaukset.append((pakka, arvaus))
	return arvaukset


def muuta_pakkaa(pakka, arvaus):
	"""Muuttaa pakkaa arvauksen mukaisesti, eli k√§√§nt√§√§ arvauksen mukaisen kortin
	ymp√§ri.

	Parametrit
	----------
	pakka : arr_like
		Pakka ennen arvausta
	arvaus : int
		K√§√§nnett√§v√§n kortin numero

	Palauttaa
	---------
	arr_like
		Pakka arvauksen j√§lkeen
	"""
	pakka[arvaus-1] = not pakka[arvaus-1]   # T√§m√§ muuttaa True:n Falseksi ja p√§invastoin
	return pakka


def tulosta_tulokset(arvaukset):
	"""Tulostaa tuloslistauksen.
	"""
	print()
	for i, (pakka, arvaus) in enumerate(arvaukset):
		tulosta_pakka(pakka, arvaus, rivinro=i+1, n√§yt√§_numerot=(i == 0))
	print()

	print("Pakka on selvitetty! Tarvitsit {} arvausta.".format(len(arvaukset)-1))
	print()


def tulosta_lopetusviesti():
	"""Tulostaa lopetusviestin.
	"""
	print("Kiitos pelaamisesta!")
	print()
	print("Pelin on Python-kielell√§ kirjoittanut Juuso Korhonen.")
	print("Alkuper√§inen idea l√§hti Matt Parkerin videosta: https://youtu.be/oCMVUROty0g")
	print()



# Koodin suoritus alkaa t√§√§lt√§
if __name__ == "__main__":
	parser = argparse.ArgumentParser()
	parser.add_argument("--apua", action='store_true', default=False, help="Tulosta apuviesti")

	args = parser.parse_args()

	if (args.apua):
		tulosta_apuviesti()
		sys.exit(0)   # Poistu pelist√§

	aloita_peli()


